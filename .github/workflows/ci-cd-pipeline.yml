name: Pipeline CI/CD Java

on:
  push:
    branches: [ "dev", "feature/**" ]
  pull_request:
    branches: [ "dev" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Étape 1: Récupération du code source
      - name: Checkout du code
        uses: actions/checkout@v4

      # Étape 2: Configuration de Java et Maven
      - name: Configurer JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'

      # Étape 3: Compilation du code
      - name: Compiler le projet
        run: mvn compile

      # Étape 4: Exécution des tests (uniquement pour les branches feature)
      - name: Exécuter les tests
        if: startsWith(github.ref, 'refs/heads/feature/')
        run: mvn test

      # Étape 5: Analyse statique (uniquement pour dev)
      - name: Analyse statique (Checkstyle)
        if: github.ref == 'refs/heads/dev'
        run: mvn checkstyle:check

      # Étape 6: Mesure de la couverture de code
      - name: Couverture de code
        run: |
          mvn jacoco:report
          # Extraction du pourcentage de couverture
          COVERAGE=$(grep -oP 'LINE_COVERAGE\>\K[0-9.]+' target/site/jacoco/jacoco.xml || echo 0)
          echo "Couverture de code: $COVERAGE%"
          # Vérification du seuil minimum (80%)
          if (( $(echo "$COVERAGE < 80" | bc -l) )); then
            echo "::error::Couverture insuffisante: $COVERAGE% (minimum 80% requis)"
            exit 1
          fi

      # Étape 7: Installation des artefacts (si succès)
      - name: Installer les artefacts
        if: success()
        run: mvn install

      # Étape 8: Publication des artefacts
      - name: Publier les artefacts
        run: |
          mkdir -p ./artefacts
          cp target/*.jar ./artefacts/
          
      # Étape 9: Téléversement des artefacts
      - name: Téléverser les artefacts
        uses: actions/upload-artifact@v3
        with:
          name: artefacts-build
          path: ./artefacts/*.jar
