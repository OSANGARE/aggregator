pipeline {
    agent any
    
    // Options globales
    options {
        timeout(time: 30, unit: 'MINUTES')
        buildDiscarder(logRotator(numToKeepStr: '10'))
        disableConcurrentBuilds()
    }
    
    // Variables d'environnement
    environment {
        APP_VERSION = '1.0.0'
        BUILD_NUMBER = "${env.BUILD_ID}"
        JAVA_HOME = tool name: 'jdk17', type: 'jdk'
    }
    
    // Étapes de la pipeline
    stages {
        // Étape de préparation
        stage('Setup') {
            steps {
                script {
                    echo "Début de l'exécution sur la branche: ${env.BRANCH_NAME}"
                    echo "Java Home: ${JAVA_HOME}"
                }
            }
        }
        
        // Étape de build
        stage('Build') {
            steps {
                script {
                    try {
                        bat 'mvn clean package -DskipTests' // Pour Windows
                        // sh './gradlew build' // Pour Linux/Mac
                    } catch (Exception e) {
                        error "Échec du build: ${e.message}"
                    }
                }
            }
            
            post {
                success {
                    archiveArtifacts artifacts: '**/target/*.jar', fingerprint: true
                }
            }
        }
        
        // Étape de tests
        stage('Test') {
            steps {
                script {
                    bat 'mvn test' // Pour Windows
                    // sh './gradlew test' // Pour Linux/Mac
                }
            }
            
            post {
                always {
                    junit '**/target/surefire-reports/*.xml'
                }
            }
        }
        
        // Étape de qualité du code
        stage('Code Quality') {
            when {
                branch 'main' // Exécuter seulement sur la branche main
            }
            steps {
                script {
                    withSonarQubeEnv('SonarQube') { // Configuration SonarQube dans Jenkins
                        bat 'mvn sonar:sonar'
                    }
                }
            }
        }
        
        // Étape de déploiement
        stage('Deploy') {
            when {
                branch 'main' // Exécuter seulement sur la branche main
            }
            steps {
                script {
                    echo "Déploiement de la version ${APP_VERSION}"
                    // Ajoutez ici vos commandes de déploiement
                }
            }
        }
    }
    
    // Actions post-build
    post {
        always {
            echo "Nettoyage après l'exécution..."
            cleanWs() // Nettoyer l'espace de travail
        }
        success {
            echo "Pipeline exécutée avec succès!"
            mail to: 'team@example.com',
                 subject: "SUCCESS: Pipeline ${env.JOB_NAME} - ${env.BUILD_NUMBER}",
                 body: "La pipeline a réussi. Voir ${env.BUILD_URL}"
        }
        failure {
            echo "Échec de la pipeline!"
            mail to: 'team@example.com',
                 subject: "FAILURE: Pipeline ${env.JOB_NAME} - ${env.BUILD_NUMBER}",
                 body: "La pipeline a échoué. Voir ${env.BUILD_URL}"
        }
        unstable {
            echo "Pipeline instable!"
        }
    }
}
